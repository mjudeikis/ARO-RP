// Code generated for package deploy by go-bindata DO NOT EDIT. (@generated)
// sources:
// deploy/staticresources/aro.openshift.io_clusters.yaml
// deploy/staticresources/master/deployment.yaml
// deploy/staticresources/master/rolebinding.yaml
// deploy/staticresources/master/service.yaml
// deploy/staticresources/master/serviceaccount.yaml
// deploy/staticresources/namespace.yaml
// deploy/staticresources/worker/deployment.yaml
// deploy/staticresources/worker/role.yaml
// deploy/staticresources/worker/rolebinding.yaml
// deploy/staticresources/worker/serviceaccount.yaml
package deploy

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// Mode return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _aroOpenshiftIo_clustersYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x59\x4f\x6f\xdb\xc8\x15\xbf\xeb\x53\x3c\xb8\x87\x1c\x6a\xc9\x09\x8a\x02\xad\x6e\x86\xbd\xc9\x0a\x9b\x64\x8d\xd8\xcd\x1e\xd6\x7b\x78\x1c\x3e\x51\xaf\x1e\xce\x70\xdf\x0c\xe5\x28\x45\xbf\x7b\xf1\x86\xa4\x44\xc9\xa4\x62\xd9\xe8\x5c\x04\x0e\x67\x7e\xef\xff\x3f\x6a\x32\x9d\x4e\x27\x58\xf1\x57\x92\xc0\xde\xcd\x01\x2b\xa6\x6f\x91\x9c\x3e\x85\xd9\xc3\x3f\xc2\x8c\xfd\xc5\xfa\xdd\xe4\x81\x5d\x3e\x87\xab\x3a\x44\x5f\x7e\xa1\xe0\x6b\x31\x74\x4d\x4b\x76\x1c\xd9\xbb\x49\x49\x11\x73\x8c\x38\x9f\x00\xa0\x73\x3e\xa2\x6e\x07\x7d\x04\x30\xde\x45\xf1\xd6\x92\x4c\x0b\x72\xb3\x87\x3a\xa3\xac\x66\x9b\x93\x24\xf0\x8e\xf4\xfa\xed\xec\xef\xb3\xb7\x13\x00\x23\x94\xae\xdf\x71\x49\x21\x62\x59\xcd\xc1\xd5\xd6\x4e\x00\x1c\x96\x34\x07\x63\xeb\x10\x49\xc2\x0c\xc5\xcf\x7c\x45\x2e\xac\x78\x19\x67\xec\x27\xa1\x22\xa3\x34\x0b\xf1\x75\x35\x87\x27\xef\x1b\x84\x96\xad\x56\xa4\x06\x2c\xed\x58\x0e\xf1\x97\xfe\xee\x47\x0e\x31\xbd\xa9\x6c\x2d\x68\x77\xa4\xd3\x66\x60\x57\xd4\x16\x65\xbb\x3d\x01\x08\xc6\x57\xd4\x47\x6d\xc5\x4b\x34\xa7\xad\x00\xeb\x77\x68\xab\x15\xbe\x6b\x50\xcc\x8a\x4a\x6c\x58\x02\x50\x76\x2f\x6f\x16\x5f\xff\x76\xbb\xb7\x0d\x90\x53\x30\xc2\x55\x4c\xaa\x6a\xe1\x81\x03\xc4\x15\x41\x73\x16\x96\x5e\xd2\x63\xc7\x24\x5c\xde\x2c\xb6\xf7\x2b\xf1\x15\x49\xe4\x4e\xfa\x66\xf5\x4c\xdf\xdb\x3d\xa0\xf6\x46\x19\x6a\x4e\x41\xae\x36\xa7\x86\x6c\x2b\x1a\xe5\xad\x0c\xe0\x97\x10\x57\x1c\x40\xa8\x12\x0a\xe4\x1a\x2f\xd8\x03\x06\x3d\x84\x0e\x7c\xf6\x6f\x32\x71\x06\xb7\x24\x0a\x03\x61\xe5\x6b\x9b\xab\xab\xac\x49\x22\x08\x19\x5f\x38\xfe\xbe\xc5\x0e\x10\x7d\x22\x6a\x31\x52\x6b\x94\xdd\x62\x17\x49\x1c\x5a\x58\xa3\xad\xe9\x1c\xd0\xe5\x50\xe2\x06\x84\x94\x0a\xd4\xae\x87\x97\x8e\x84\x19\x7c\xf2\x42\xc0\x6e\xe9\xe7\xb0\x8a\xb1\x0a\xf3\x8b\x8b\x82\x63\xe7\xf2\xc6\x97\x65\xed\x38\x6e\x2e\x92\xf7\x72\x56\x47\x2f\xe1\x22\xa7\x35\xd9\x8b\xc0\xc5\x14\xc5\xac\x38\x92\x89\xb5\xd0\x05\x56\x3c\x4d\xac\xbb\xe4\xf6\xb3\x32\xff\x8b\xb4\x41\x12\xde\xec\xf1\x1a\x37\xea\x1e\x21\x0a\xbb\xa2\xf7\x22\xf9\xe2\x11\x0b\xa8\x57\xaa\xb5\xb1\xbd\xda\x48\xb1\x53\xb4\x6e\xa9\x76\xbe\xfc\x74\x7b\x07\x1d\xe9\x64\x8c\x43\xed\x27\xbd\xef\x2e\x86\x9d\x09\x54\x61\xec\x96\x24\x8d\x11\x97\xe2\xcb\x84\x49\x2e\xaf\x3c\xbb\xd8\xfa\x16\x93\x3b\x54\x7f\xa8\xb3\x92\xa3\xda\xfd\xcf\x9a\x42\x54\x5b\xcd\xe0\x2a\xe5\x01\xc8\x08\xea\x2a\xc7\x48\xf9\x0c\x16\x0e\xae\xb0\x24\x7b\x85\x81\xfe\xef\x06\x50\x4d\x87\xa9\x2a\xf6\x79\x26\xe8\xa7\xb0\xc3\xc3\x8d\xd6\x7a\x2f\xba\x44\x33\x62\xaf\x36\x3e\x6f\x2b\x32\x7b\x11\x93\x53\x60\x51\x9f\x8e\x18\x49\x23\xa1\x9f\x7d\xba\x35\x1c\xa9\xba\xd0\xc8\xb5\x2f\x91\xdd\xe1\x8b\x51\xa1\xa0\x89\xf1\x85\x8b\x8b\x9b\xd3\x2e\xf5\xb4\x3b\x98\x21\x76\xf7\x35\xf8\x8a\x03\x19\x00\xf0\xfb\x4f\x6e\xcd\xe2\x5d\x49\x2e\x9e\x44\x3a\x3f\x5d\xc4\x25\xa1\x32\xfa\x44\x61\x07\x66\x79\xdf\x1e\xdb\xb3\xcb\xe5\x97\x5f\x35\xeb\x0a\x46\x2f\x1d\x10\x14\x9a\x65\x9e\x80\x8d\x5b\x46\x97\xe6\x18\x67\xd8\xd2\xa5\x25\x89\xbf\x51\xb6\xf2\xfe\x61\xe8\x60\x27\x4a\xe6\xbd\x25\x3c\xcc\x8f\x7b\x50\xd7\x9f\x6f\x3f\x61\xf8\xf3\x95\x28\x1f\xc8\xd1\x1a\x3f\xfa\xa2\x60\x57\xbc\x12\xeb\x93\x77\x1c\xbd\xda\xe0\xca\xbb\x25\xbf\x16\xee\xf3\xed\x87\x41\x65\x9e\x02\xe1\x73\xba\x16\x64\x47\xf2\x4a\xa4\x9b\xda\xda\x5b\x32\x42\x03\x0e\x7b\x12\xd0\x17\x5f\x47\x7a\xcf\xdf\x5e\x09\xf3\x9b\x97\x07\x14\x5f\xbb\x3c\x5c\x6d\x7b\xa8\x97\x60\x8e\x64\x31\x5d\xc5\x71\xdf\x38\xee\xf2\x26\xb9\xc0\x68\x7e\x48\x00\x18\xb5\x36\xcf\xe1\xcd\xef\x6f\xa7\xff\xfc\xe3\xaf\xb3\xe6\xe7\xcd\x11\x29\x06\x43\x5c\x57\xb9\xf5\xbd\x0f\x57\xb7\x47\xd3\x8b\x2e\x72\x75\x39\xfc\x66\x0a\xd7\x8c\x85\xf3\x21\xb2\x09\x37\xe2\xf3\x91\x53\x77\x4f\x3b\x8d\x67\xf0\x79\x44\xd9\xec\x96\x82\x8b\xfc\xa4\xdc\xc6\xae\x10\x0a\xe1\xc4\xfc\xdd\x74\x44\x14\xaf\x56\x64\x1e\x86\x9c\xe6\xb8\x61\x6b\xb1\x23\x61\xc9\x91\xca\x91\x57\x3f\xb4\x5f\x77\x00\x45\x70\x73\x8a\xde\xac\x37\xa9\x95\x3c\x49\x05\x5d\x1b\x34\xa4\xef\xbd\xb2\xd0\xcd\x33\x8b\xeb\xae\xa1\xbe\xfc\xae\x45\x60\x07\xd0\x74\xb6\xd4\xeb\xf3\x9f\xcd\xc5\xda\x51\x3c\xc9\xe2\x63\x1d\x47\xc4\x58\x87\x67\xf4\x1c\xe9\xdc\x5e\xd7\xe1\xb3\xa0\x2d\xde\x8b\xdb\x0e\xe3\x5d\xce\xbd\x79\xae\xbf\x46\xdd\x61\x9f\xb7\x0e\xa1\xd7\x78\x36\x53\x80\x72\x96\x4c\xbb\x37\x17\xbc\x79\x5a\x7b\x3b\x1d\xd0\x6c\x87\x16\x00\x85\xf4\xd6\x76\x64\x85\x92\xcc\x0a\x1d\x87\x32\x45\x80\xcb\x29\xd7\xc1\x41\x9b\xd0\x40\xc3\x61\xfe\xb8\x22\xd7\x36\x67\x11\xd9\x86\x2d\x23\x3b\xd6\x94\x8a\xf6\xb2\x08\x95\xb0\x17\x86\x07\xe7\x1f\x1d\x78\x81\x47\x9d\x5a\x06\x61\xd3\xf9\xaa\xb2\x1b\xa5\x8f\xd6\x02\xbb\x10\xd1\x19\x6a\x08\x40\xc1\x6b\x72\xa0\x7d\xfd\x0c\xee\x5d\x5f\xa6\x66\x14\x1a\x04\xcd\x08\x30\x6f\x65\xa2\x6f\x95\x65\xc3\xd1\x6e\x9a\xa9\x69\xd3\xb3\x20\xc4\x15\x46\x15\x59\x42\x9a\x85\x8c\x2f\x2b\xef\x54\xeb\x83\xb0\x26\xa9\x31\xf3\x75\x04\xc1\xb8\x4a\x13\x00\xba\xd4\xce\xb3\x34\xa3\x85\x0f\xb4\x87\x9f\x74\x9a\xa6\x05\x19\xd1\x6b\x9a\x1f\x7c\x42\xeb\xe9\x32\xcc\xe0\x57\x67\xa8\xf5\xcf\xfc\x3c\x69\xbe\x24\x74\x4a\x26\x29\x66\xab\x89\x11\x56\x1d\xb4\x63\x85\x1a\xba\xa0\x1c\x50\x32\x8e\x82\xc2\x76\x03\x53\x60\x7d\x67\x7c\x49\x01\x2a\x94\xd8\x45\xee\xe5\xcd\x22\x8d\x85\x83\xa0\x2b\x6c\x02\x25\x60\x49\x90\xa1\x79\x78\x44\xc9\xc3\x34\xa9\x6e\xe9\xa5\x79\x52\x1d\x62\xe4\x8c\x2d\xc7\xa4\x72\x43\xe2\xd4\x98\x83\x90\xe8\x36\xad\xf0\x07\x5c\xcc\x06\x8e\x1f\xcf\xc5\x00\x16\x43\xbc\x13\x74\x81\xbb\xcf\x22\x63\x09\x78\x2f\xea\x3e\x62\x88\x10\xb9\xa4\x26\x77\x6d\x63\x30\x6e\xa1\x28\x6f\xcd\xe4\xa8\x4d\x30\x23\xb8\x90\xbc\xd8\x25\x89\x86\x24\xd0\xb5\xf4\x52\x62\x9c\x83\x0e\x7b\x53\x25\xfb\xd2\x22\x51\x52\x08\x58\x3c\x4f\xc6\x9f\xeb\x12\xdd\x54\x08\x73\xcc\x2c\x75\x57\x81\x5d\xce\x5a\x32\x5c\xb1\x0d\xeb\xe4\xdf\xa3\xe2\xd9\xa4\xab\xad\x62\xc6\x64\xfc\x21\xef\x42\x18\xc6\x5a\xa1\xb1\xa4\xf8\x25\xdd\xd1\xda\x73\x90\xb3\x50\x0d\x33\x7d\xf4\x92\x9f\xef\x06\xe7\x51\x11\xf6\xbf\xba\x6c\x4b\x16\x46\x2a\xbc\x6c\xf4\xd9\x60\x1d\x68\xfb\xa2\x16\x21\x17\x5b\xbb\x8f\x09\x0c\xb0\x88\x03\x9c\x69\x36\x05\x76\x29\x0c\x58\x31\xeb\x58\xd5\xf1\x1c\x42\x6d\x56\x80\x21\xf1\x6d\xd9\x8d\x33\xfb\x50\x67\x64\xa2\x85\x82\xe2\xf6\xb2\x86\x1b\x3b\x08\x75\x59\xa2\xf0\xf7\x94\x11\x4c\xc3\x66\x9b\x36\x93\x00\xa3\xbc\xfe\xd0\x38\x43\x35\x74\xc4\x38\x6d\x19\x6d\xfb\x81\xe6\xe2\x56\x73\x9d\xe1\xd2\x47\x0e\x55\xc7\x9d\xd4\x74\x3e\x2a\xeb\x7b\xb4\x81\xce\xe1\x5f\x2e\x95\x8d\x17\x73\x9f\x0e\x9c\xe4\x58\x77\x9b\x8a\x3a\x11\xf4\xf6\x13\x01\x46\x33\xa2\x2e\xbd\xb8\xa9\xd8\xa0\xb5\x1b\xcd\xcb\x9d\x03\xe6\xa0\x1e\xa9\xd5\x2f\xac\xbc\x44\xa8\x56\x92\xbe\xe7\xf4\xab\xd8\x78\x1a\xd9\x54\xb4\xfd\xda\xd7\x46\x29\xb5\x8d\x09\x37\x75\xf8\xfe\x0c\x33\xa7\xb9\xc4\x4e\xa3\xd4\x74\x7f\x06\x95\xb7\x28\x1c\x37\xe3\x4e\xfa\xde\x0b\xd0\x37\x2c\x2b\x4b\xe7\xc0\x87\x52\x76\x74\x42\x53\xec\x51\x01\xd9\x6c\x1a\xbf\x5e\xa3\xe5\x7c\xdc\x78\x0d\x47\x1c\x20\x9d\xbb\x3f\x03\x83\x21\x29\xb5\x12\x9f\x61\xa6\xf5\x7d\xa5\xdd\x81\x94\xe7\x10\xfc\x3e\xe1\x51\xd0\x56\x7e\x2d\x62\x68\x2d\xe5\x70\x7f\xb6\x70\x2d\x81\x17\xfa\x47\x53\xac\x69\xa0\xd3\xd4\x49\x66\x34\xb9\x4f\x13\xee\xc0\x8b\x23\xdd\xf8\xb1\x36\xbe\xfb\x92\xf2\x83\x6f\x46\x23\x0d\x7b\xfe\x33\xc6\x5f\x68\x13\x6e\x9a\x44\x76\x42\xbb\xf9\x8c\x89\xec\x29\xbb\x83\x32\x3e\xd9\x6c\x9a\xe7\x39\xa8\x33\x36\x1b\xd1\x8b\xd6\xa7\xde\x4e\x9d\x6d\xbf\xf7\x76\xdc\xb5\xc9\x06\xfe\xf3\xdf\xc9\x2e\xef\xa0\x31\x54\x45\xca\x3f\x1f\xfe\x0d\x71\x76\x96\x1e\xba\xff\x19\xd2\x63\xaf\xef\x86\xdf\xff\x98\x34\x84\x29\xff\xda\xfd\xa3\xa0\x9b\xff\x0b\x00\x00\xff\xff\xe6\x00\xf8\xfc\xc1\x19\x00\x00")

func aroOpenshiftIo_clustersYamlBytes() ([]byte, error) {
	return bindataRead(
		_aroOpenshiftIo_clustersYaml,
		"aro.openshift.io_clusters.yaml",
	)
}

func aroOpenshiftIo_clustersYaml() (*asset, error) {
	bytes, err := aroOpenshiftIo_clustersYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "aro.openshift.io_clusters.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _masterDeploymentYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\x52\xc1\x6e\xdb\x30\x0c\xbd\xfb\x2b\x88\xde\xdd\xa4\xb7\x42\xb7\x62\x0d\x7a\x19\x82\x62\x59\x77\x67\x64\x26\x16\x22\x8b\x02\x49\x07\x75\xbf\x7e\x10\x92\x28\xce\x0a\x64\x3a\x19\x7c\x8f\xef\x3d\xd2\xc4\x1c\xfe\x90\x68\xe0\xe4\x00\x73\xd6\xc5\xf1\xa9\x39\x84\xd4\x39\x78\xa5\x1c\x79\x1a\x28\x59\x33\x90\x61\x87\x86\xae\x01\x88\xb8\xa5\xa8\xe5\x0b\x4a\x83\x03\x14\x6e\x39\x93\xa0\xb1\xb4\x03\xaa\x91\x34\x00\x09\x07\xba\x87\x69\x46\x4f\x0e\x38\x53\xd2\x3e\xec\xac\xc5\xaf\x51\xa8\x92\x1b\xcd\xe4\x8b\x89\x50\x8e\xc1\xa3\x3a\x78\x6a\x00\x94\x22\x79\x63\x39\xd9\x0f\x68\xbe\xff\x39\xcb\x73\x37\x91\x9a\xa0\xd1\x7e\x3a\x51\x85\x63\x0c\x69\xff\x91\x3b\x34\xba\x74\x0f\xf8\xb9\x19\x65\x4f\x27\xb3\x73\xe5\x23\xe1\x11\x43\xc4\x6d\x24\x07\xcb\x06\xc0\x68\xc8\xb1\x76\xcd\x77\x53\x5e\xbc\xc9\x73\x37\x11\xc0\x65\xca\xf2\x3c\x27\xc3\x90\x48\x6a\x73\x0b\x9e\x87\x01\x53\x77\x55\x6b\x8b\xd4\x55\x5b\xf6\x3a\xc7\xea\xf6\xae\xa5\x99\x59\x79\x61\xc0\x32\xde\xdb\x6a\xbd\xfa\xf5\xf2\x7b\xf5\x5a\x81\xef\xff\xab\x42\x99\xc5\x6e\x6c\x6a\xd2\x77\x16\x73\xf0\xbc\x7c\x5e\x56\xf4\xa2\xd4\x9b\xe5\x5a\x8c\xe1\x48\x89\x54\xdf\x85\xb7\xe4\x66\xdc\xc2\x7a\x23\x9b\x97\x00\x32\x5a\xef\x60\xd1\x13\x46\xeb\xbf\x16\x42\xd8\x4d\xb7\x84\x7f\x6d\x13\x77\xb4\xb9\x39\x8d\x4b\xb5\x15\x8e\xf4\x78\x18\xb7\x24\x89\x8c\xf4\x31\xf0\xe2\xb4\x12\x07\x0f\x0f\x67\xaa\x92\x1c\x83\xa7\x17\xef\x79\x4c\xb6\xbe\x73\xb9\xdf\xd9\xf7\x98\x59\x02\x4b\xb0\xe9\x47\x44\xd5\x93\xac\x4e\x6a\x34\xb4\x3e\x8e\x85\xd7\x7a\x09\x16\x3c\xc6\x73\x83\x71\x2c\x3a\x81\xd3\xec\x06\x0e\x34\xb9\xff\xcc\x52\x47\xbe\xe4\x70\xb0\xfa\x0c\x6a\x5a\x01\xda\xed\xc8\x9b\x83\x35\x6f\x7c\x4f\xdd\x18\xa9\xf9\x1b\x00\x00\xff\xff\x57\x5c\x5d\xa2\xfa\x03\x00\x00")

func masterDeploymentYamlBytes() ([]byte, error) {
	return bindataRead(
		_masterDeploymentYaml,
		"master/deployment.yaml",
	)
}

func masterDeploymentYaml() (*asset, error) {
	bytes, err := masterDeploymentYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "master/deployment.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _masterRolebindingYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\x8e\xb1\x4e\x03\x31\x0c\x40\x77\x7f\x85\x7f\x20\x87\xd8\x50\x36\x60\x60\x2f\x12\xbb\x9b\xb8\xd4\xf4\x62\x47\x8e\xd3\xa1\x5f\x8f\xaa\xa2\x5b\x90\x6e\xb5\xdf\xf3\x33\x75\xf9\x62\x1f\x62\x9a\xd1\x8f\x54\x16\x9a\x71\x36\x97\x1b\x85\x98\x2e\x97\x97\xb1\x88\x3d\x5d\x9f\xe1\x22\x5a\x33\xbe\xaf\x73\x04\xfb\xc1\x56\x7e\x13\xad\xa2\xdf\xd0\x38\xa8\x52\x50\x06\x44\xa5\xc6\x19\xc9\x2d\x59\x67\xa7\x30\x4f\x8d\xee\x02\xb8\xad\x7c\xe0\xd3\x1d\xa2\x2e\x1f\x6e\xb3\xef\x04\x01\xf1\x5f\x6f\x3b\x5f\x1e\xb3\x44\xb5\x89\xc2\x98\xc7\x1f\x2e\x31\x32\xa4\x3f\xe7\x93\xfd\x2a\x85\x5f\x4b\xb1\xa9\xb1\xfb\xd5\x63\x37\x3a\x15\xce\x68\x9d\x75\x9c\xe5\x14\x89\x6e\xd3\x79\x83\xe1\x37\x00\x00\xff\xff\x4f\x98\xa4\x7c\x24\x01\x00\x00")

func masterRolebindingYamlBytes() ([]byte, error) {
	return bindataRead(
		_masterRolebindingYaml,
		"master/rolebinding.yaml",
	)
}

func masterRolebindingYaml() (*asset, error) {
	bytes, err := masterRolebindingYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "master/rolebinding.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _masterServiceYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x74\x8d\x41\xca\xc2\x40\x0c\x46\xf7\x73\x8a\x5c\x60\xa0\xff\xae\xcc\x29\x7e\x10\xdc\x87\xe9\xa7\x1d\xb4\x93\x90\xc4\x2e\x3c\xbd\xd4\x16\x5d\xb9\x0b\xef\x7b\xbc\xb0\xb6\x33\xcc\x9b\xf4\x42\xeb\x5f\xba\xb5\x3e\x15\x3a\xc1\xd6\x56\x91\x16\x04\x4f\x1c\x5c\x12\x51\xe7\x05\x85\xd8\x24\x8b\xc2\x38\xc4\xf2\xc2\x1e\xb0\x63\x73\xe5\x8a\x42\xa2\xe8\x3e\xb7\x4b\x64\x7e\x3e\x0c\x1f\x39\xb9\xa2\x6e\x1d\xc7\x1d\x35\xc4\xb6\x9b\x88\x55\x7f\x45\x55\x2c\x7c\xb7\xf2\xf1\x7d\x8e\xd0\x37\xd8\xd7\x42\xe3\x30\x0e\x07\x08\xb6\x2b\xe2\xff\x8b\x5f\x01\x00\x00\xff\xff\x10\x70\xf6\x36\xda\x00\x00\x00")

func masterServiceYamlBytes() ([]byte, error) {
	return bindataRead(
		_masterServiceYaml,
		"master/service.yaml",
	)
}

func masterServiceYaml() (*asset, error) {
	bytes, err := masterServiceYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "master/service.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _masterServiceaccountYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x3c\xca\x31\x8e\x02\x31\x0c\x05\xd0\x3e\xa7\xf0\x05\x52\x6c\xeb\x6e\xcf\x80\x44\xff\x95\xf9\x08\x0b\xc5\x8e\x1c\xcf\x14\x9c\x9e\x06\x51\xbf\x87\x65\x77\xe6\xb6\x70\x95\xeb\xaf\xbd\xcc\x0f\x95\x1b\xf3\xb2\xc1\xff\x31\xe2\xf4\x6a\x93\x85\x03\x05\x6d\x22\x8e\x49\x15\x64\xf4\x58\x4c\x54\x64\x9f\xd8\xc5\xfc\xda\x5e\x18\x54\x89\x45\xdf\x4f\x7b\x54\xc7\xfb\x4c\xfe\x72\xfb\x04\x00\x00\xff\xff\xe4\xf5\x04\x25\x70\x00\x00\x00")

func masterServiceaccountYamlBytes() ([]byte, error) {
	return bindataRead(
		_masterServiceaccountYaml,
		"master/serviceaccount.yaml",
	)
}

func masterServiceaccountYaml() (*asset, error) {
	bytes, err := masterServiceaccountYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "master/serviceaccount.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _namespaceYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x44\xca\xb1\x0d\x02\x31\x0c\x05\xd0\x3e\x53\x58\xd7\x07\x44\x9b\x21\x28\xe9\xbf\x2e\x1f\x61\x41\xec\x28\x36\x14\x4c\x8f\xa8\xae\x7f\x98\x7a\xe3\x0a\x75\x6b\xf2\xb9\x94\xa7\x5a\x6f\x72\xc5\x60\x4c\xec\x2c\x83\x89\x8e\x44\x2b\x22\x86\xc1\x26\x3e\x69\xf1\xd0\x7b\x56\x7c\xdf\x8b\xd5\x27\x17\xd2\x57\x11\x81\x99\x27\x52\xdd\xe2\xef\xe5\xb0\x27\xf5\xb3\x79\x67\x0d\xbe\xb8\xa7\xaf\x26\xdb\x56\x7e\x01\x00\x00\xff\xff\xc1\xaf\xa6\x4c\x7c\x00\x00\x00")

func namespaceYamlBytes() ([]byte, error) {
	return bindataRead(
		_namespaceYaml,
		"namespace.yaml",
	)
}

func namespaceYaml() (*asset, error) {
	bytes, err := namespaceYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "namespace.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _workerDeploymentYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\x52\xcb\x6e\xdb\x40\x0c\xbc\xeb\x2b\x88\xdc\x15\x27\xb7\x60\x6f\x41\x63\xe4\x52\x04\x45\xd3\xf4\x4e\xaf\xa6\xd6\xc2\xfb\x02\x49\xbb\x55\xbe\xbe\x10\x64\xcb\x32\x02\x88\x27\x61\x38\x9c\x19\x2e\xc5\x35\xfc\x86\x68\x28\xd9\x11\xd7\xaa\x9b\xd3\x63\x73\x08\xb9\x73\xf4\x82\x1a\xcb\x90\x90\xad\x49\x30\xee\xd8\xd8\x35\x44\x91\x77\x88\x3a\x7e\xd1\x38\xe0\x88\xa5\xb4\xa5\x42\xd8\x8a\xb4\x7f\x8b\x1c\x20\x0d\x51\xe6\x84\xb5\x9e\x56\xf6\x70\x54\x2a\xb2\xf6\xe1\x8f\xb5\xfc\x79\x14\xcc\xe4\x46\x2b\xfc\x68\x22\xa8\x31\x78\x56\x47\x8f\x0d\x91\x22\xc2\x5b\x91\xc9\x3e\xb1\xf9\xfe\xfb\x22\xcf\x6a\x22\x35\x61\xc3\x7e\x98\xa8\x52\x62\x0c\x79\xff\x51\x3b\x36\x5c\xa6\x13\xff\x7b\x3f\xca\x1e\x93\xd9\x19\xf9\xc8\x7c\xe2\x10\x79\x17\xe1\xe8\xa1\x21\x32\xa4\x1a\xe7\xa9\xe5\xdb\x8c\x15\x6f\xf2\xac\x26\x22\xba\x6c\x39\x96\x2f\xd9\x38\x64\xc8\x3c\xdc\x92\x2f\x29\x71\xee\xae\x6a\xed\x28\x75\xd5\x96\xbd\x2e\x7b\xf3\xeb\x5d\xa1\x85\xd9\x58\x21\xf1\xb8\xde\xeb\xf6\x6d\xfb\xf3\xf9\xd7\xf6\x65\x6e\x7c\xbd\xd7\xdc\x8a\xe1\x84\x0c\xd5\x1f\x52\x76\xb8\xda\x11\xf5\x66\xf5\x15\xb6\x84\x88\x2a\x5b\xef\x68\xd3\x83\xa3\xf5\x9f\x1b\x01\x77\xc3\x2d\xa1\x88\x39\x7a\x7a\x78\x7a\x38\xc3\xb9\x74\x78\xbf\x39\xec\x05\x6d\xa5\x44\xdc\x1f\x8e\x3b\x48\x86\x41\xef\x43\xd9\x4c\x0b\x39\xba\xbb\x3b\x53\x15\x72\x0a\x1e\xcf\xde\x97\x63\xb6\xb7\x95\xff\xee\x2b\x7b\x8d\x59\x25\x14\x09\x36\x7c\x8b\xac\x3a\xc9\xea\xa0\x86\xd4\xfa\x78\x54\x83\xb4\x5e\x82\x05\xcf\xb1\xf9\x1f\x00\x00\xff\xff\x4f\x57\x4a\x02\x45\x03\x00\x00")

func workerDeploymentYamlBytes() ([]byte, error) {
	return bindataRead(
		_workerDeploymentYaml,
		"worker/deployment.yaml",
	)
}

func workerDeploymentYaml() (*asset, error) {
	bytes, err := workerDeploymentYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "worker/deployment.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _workerRoleYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xa4\x8e\xb1\x6e\x2c\x31\x08\x45\x7b\xbe\x82\x1f\xb0\x57\xaf\x7b\x72\x9b\x22\x7d\x14\xa5\x67\x3d\x24\x83\xc6\x63\x2c\xc0\xbb\x52\xbe\x3e\x9a\xd9\x6d\x53\xa5\xe2\x0a\x1d\x0e\x17\x52\x4a\x40\x43\x3e\xd8\x5c\xb4\x17\xb4\x2b\xd5\x4c\x33\x56\x35\xf9\xa6\x10\xed\x79\xfb\xef\x59\xf4\x72\xfb\x07\x9b\xf4\xa5\xe0\x4b\x9b\x1e\x6c\x6f\xda\x18\x76\x0e\x5a\x28\xa8\x00\x62\x35\x3e\x0f\xde\x65\x67\x0f\xda\x47\xc1\x3e\x5b\x03\xc4\x4e\x3b\x17\x24\xd3\xa4\x83\x8d\x42\x2d\xdd\xd5\x36\x36\xb0\xd9\xd8\x0b\x24\xa4\x21\xaf\xa6\x73\xf8\x61\x4a\x07\x9b\x75\x70\xf7\x55\x3e\x23\x8b\x02\xa2\xb1\xeb\xb4\xca\x4f\xa2\x3e\x5a\x38\x20\xde\xd8\xae\xcf\xed\x17\xc7\x39\x9b\xf8\x23\xdc\x29\xea\xfa\x17\xff\xc5\x83\x62\xfe\xf2\x66\x9c\xf6\x23\xcd\xb1\x50\x30\xfc\x04\x00\x00\xff\xff\x30\x78\x19\x41\x50\x01\x00\x00")

func workerRoleYamlBytes() ([]byte, error) {
	return bindataRead(
		_workerRoleYaml,
		"worker/role.yaml",
	)
}

func workerRoleYaml() (*asset, error) {
	bytes, err := workerRoleYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "worker/role.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _workerRolebindingYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\x8d\x31\x6e\xc3\x30\x0c\x45\x77\x9d\x82\x17\x90\x8b\x6e\x85\xb6\xb6\x43\x77\x17\xe8\x4e\xcb\x74\xcd\xda\x26\x05\x8a\x72\x01\x9f\x3e\x08\x12\x64\x09\xe0\xf9\xbf\xf7\x1f\x16\xfe\x21\xab\xac\x92\xc0\x06\xcc\x1d\x36\x9f\xd5\xf8\x40\x67\x95\x6e\x79\xab\x1d\xeb\xcb\xfe\x1a\x16\x96\x31\xc1\xe7\xda\xaa\x93\xf5\xba\xd2\x07\xcb\xc8\xf2\x1b\x36\x72\x1c\xd1\x31\x05\x00\xc1\x8d\x12\xa0\x69\xd4\x42\x86\xae\x16\xff\xd5\x16\xb2\x60\xba\x52\x4f\xd3\x15\xc2\xc2\x5f\xa6\xad\x9c\x04\x03\xc0\x53\xef\xf4\xbe\xb6\xe1\x8f\xb2\xd7\x14\xe2\xdd\xfc\x26\xdb\x39\xd3\x7b\xce\xda\xc4\x4f\xe5\xdb\x56\x0b\x66\x4a\xa0\x85\xa4\xce\x3c\x79\xc4\xa3\x19\x3d\xe0\x70\x09\x00\x00\xff\xff\x73\xce\x57\x9b\x2a\x01\x00\x00")

func workerRolebindingYamlBytes() ([]byte, error) {
	return bindataRead(
		_workerRolebindingYaml,
		"worker/rolebinding.yaml",
	)
}

func workerRolebindingYaml() (*asset, error) {
	bytes, err := workerRolebindingYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "worker/rolebinding.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _workerServiceaccountYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x3c\xca\x31\x8a\xc3\x40\x0c\x05\xd0\x7e\x4e\xa1\x0b\x4c\xb1\xad\xba\x3d\x43\x20\xfd\x67\xfc\x43\x84\xb1\x34\x68\x64\x07\x72\xfa\x34\x21\xf5\x7b\x98\x76\x67\x2e\x0b\x57\xb9\xfe\xda\x6e\xbe\xa9\xdc\x98\x97\x0d\xfe\x8f\x11\xa7\x57\x3b\x58\xd8\x50\xd0\x26\xe2\x38\xa8\x82\x8c\x1e\x93\x89\x8a\xec\xaf\xc8\x9d\xf9\xb5\x35\x31\xa8\x12\x93\xbe\x9e\xf6\xa8\x8e\xf7\x99\xfc\xe5\xf6\x09\x00\x00\xff\xff\xe3\x3c\x43\x66\x70\x00\x00\x00")

func workerServiceaccountYamlBytes() ([]byte, error) {
	return bindataRead(
		_workerServiceaccountYaml,
		"worker/serviceaccount.yaml",
	)
}

func workerServiceaccountYaml() (*asset, error) {
	bytes, err := workerServiceaccountYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "worker/serviceaccount.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"aro.openshift.io_clusters.yaml": aroOpenshiftIo_clustersYaml,
	"master/deployment.yaml":         masterDeploymentYaml,
	"master/rolebinding.yaml":        masterRolebindingYaml,
	"master/service.yaml":            masterServiceYaml,
	"master/serviceaccount.yaml":     masterServiceaccountYaml,
	"namespace.yaml":                 namespaceYaml,
	"worker/deployment.yaml":         workerDeploymentYaml,
	"worker/role.yaml":               workerRoleYaml,
	"worker/rolebinding.yaml":        workerRolebindingYaml,
	"worker/serviceaccount.yaml":     workerServiceaccountYaml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"aro.openshift.io_clusters.yaml": {aroOpenshiftIo_clustersYaml, map[string]*bintree{}},
	"master": {nil, map[string]*bintree{
		"deployment.yaml":     {masterDeploymentYaml, map[string]*bintree{}},
		"rolebinding.yaml":    {masterRolebindingYaml, map[string]*bintree{}},
		"service.yaml":        {masterServiceYaml, map[string]*bintree{}},
		"serviceaccount.yaml": {masterServiceaccountYaml, map[string]*bintree{}},
	}},
	"namespace.yaml": {namespaceYaml, map[string]*bintree{}},
	"worker": {nil, map[string]*bintree{
		"deployment.yaml":     {workerDeploymentYaml, map[string]*bintree{}},
		"role.yaml":           {workerRoleYaml, map[string]*bintree{}},
		"rolebinding.yaml":    {workerRolebindingYaml, map[string]*bintree{}},
		"serviceaccount.yaml": {workerServiceaccountYaml, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
