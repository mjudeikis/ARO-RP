// Code generated for package deploy by go-bindata DO NOT EDIT. (@generated)
// sources:
// deploy/staticresources/aro.openshift.io_clusters.yaml
// deploy/staticresources/master/deployment.yaml
// deploy/staticresources/master/rolebinding.yaml
// deploy/staticresources/master/service.yaml
// deploy/staticresources/master/serviceaccount.yaml
// deploy/staticresources/namespace.yaml
// deploy/staticresources/worker/deployment.yaml
// deploy/staticresources/worker/role.yaml
// deploy/staticresources/worker/rolebinding.yaml
// deploy/staticresources/worker/serviceaccount.yaml
package deploy

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// Mode return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _aroOpenshiftIo_clustersYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x58\x4b\x6f\xe3\xc8\x11\xbe\xeb\x57\x14\x9c\xc3\x1c\x62\xd1\x33\x08\x02\x24\xba\x0d\x3c\xbb\x1b\x61\x5f\xc6\xd8\x98\xcb\x7a\x0f\xc5\x66\x89\xac\xb8\xd9\xcd\x74\x17\xe5\xd1\x04\xf9\xef\x41\x35\x49\x89\x92\x48\xdb\x5a\x60\xfb\x22\xb0\x1f\xf5\xee\xaf\xbe\xd6\x62\xb9\x5c\x2e\xb0\xe1\x2f\x14\x22\x7b\xb7\x02\x6c\x98\xbe\x0a\x39\xfd\x8a\xd9\xd3\x3f\x62\xc6\xfe\x66\xfb\x61\xf1\xc4\xae\x58\xc1\x6d\x1b\xc5\xd7\x9f\x29\xfa\x36\x18\xfa\x44\x1b\x76\x2c\xec\xdd\xa2\x26\xc1\x02\x05\x57\x0b\x00\x74\xce\x0b\xea\x74\xd4\x4f\x00\xe3\x9d\x04\x6f\x2d\x85\x65\x49\x2e\x7b\x6a\x73\xca\x5b\xb6\x05\x85\x24\x7c\x50\xbd\x7d\x9f\xfd\x3d\x7b\xbf\x00\x30\x81\xd2\xf1\x07\xae\x29\x0a\xd6\xcd\x0a\x5c\x6b\xed\x02\xc0\x61\x4d\x2b\x30\xb6\x8d\x42\x21\x66\x18\x7c\xe6\x1b\x72\xb1\xe2\x8d\x64\xec\x17\xb1\x21\xa3\x3a\xcb\xe0\xdb\x66\x05\x67\xeb\x9d\x84\xde\xac\xde\xa5\x4e\x58\x9a\xb1\x1c\xe5\xc7\xf1\xec\x4f\x1c\x25\xad\x34\xb6\x0d\x68\x0f\xaa\xd3\x64\x64\x57\xb6\x16\xc3\x7e\x7a\x01\x10\x8d\x6f\x68\x2c\xb5\x77\x2f\xe9\x5c\xf6\x0e\x6c\x3f\xa0\x6d\x2a\xfc\xd0\x49\x31\x15\xd5\xd8\x99\x04\xa0\xe6\x7e\xbc\x5b\x7f\xf9\xdb\xfd\xd1\x34\x40\x41\xd1\x04\x6e\x24\x85\xaa\x17\x0f\x1c\x41\x2a\x82\x6e\x2f\x6c\x7c\x48\x9f\x83\x91\xf0\xf1\x6e\xbd\x3f\xdf\x04\xdf\x50\x10\x1e\xbc\xef\xc6\x28\xf5\xa3\xd9\x13\x6d\xef\xd4\xa0\x6e\x17\x14\x9a\x73\xea\xd4\xf6\xae\x51\xd1\xfb\x00\x7e\x03\x52\x71\x84\x40\x4d\xa0\x48\xae\xab\x82\x23\xc1\xa0\x9b\xd0\x81\xcf\xff\x4d\x46\x32\xb8\xa7\xa0\x62\x20\x56\xbe\xb5\x85\x96\xca\x96\x82\x40\x20\xe3\x4b\xc7\xdf\xf6\xb2\x23\x88\x4f\x4a\x2d\x0a\xf5\x49\x39\x0c\x76\x42\xc1\xa1\x85\x2d\xda\x96\xae\x01\x5d\x01\x35\xee\x20\x90\x6a\x81\xd6\x8d\xe4\xa5\x2d\x31\x83\x9f\x7d\x20\x60\xb7\xf1\x2b\xa8\x44\x9a\xb8\xba\xb9\x29\x59\x86\x92\x37\xbe\xae\x5b\xc7\xb2\xbb\x49\xd5\xcb\x79\x2b\x3e\xc4\x9b\x82\xb6\x64\x6f\x22\x97\x4b\x0c\xa6\x62\x21\x23\x6d\xa0\x1b\x6c\x78\x99\x4c\x77\xa9\xec\xb3\xba\xf8\x4b\xe8\x2f\x49\x7c\x77\x64\xab\xec\xb4\x3c\xa2\x04\x76\xe5\x68\x21\xd5\xe2\x0b\x19\xd0\xaa\xd4\x6c\x63\x7f\xb4\xf3\xe2\x10\x68\x9d\xd2\xe8\x7c\xfe\xee\xfe\x01\x06\xd5\x29\x19\xa7\xd1\x4f\x71\x3f\x1c\x8c\x87\x14\x68\xc0\xd8\x6d\x28\x74\x49\xdc\x04\x5f\x27\x99\xe4\x8a\xc6\xb3\x93\xbe\xb6\x98\xdc\x69\xf8\x63\x9b\xd7\x2c\x9a\xf7\xff\xb4\x14\x45\x73\x95\xc1\x6d\xc2\x01\xc8\x09\xda\xa6\x40\xa1\x22\x83\xb5\x83\x5b\xac\xc9\xde\x62\xa4\x3f\x3d\x01\x1a\xe9\xb8\xd4\xc0\xbe\x2d\x05\x63\x08\x3b\xdd\xdc\x45\x6d\xb4\x30\x00\xcd\x4c\xbe\xfa\xfb\x79\xdf\x90\x39\xba\x31\x05\x45\x0e\x5a\xd3\x82\x42\x7a\x13\xc6\xe8\x33\x8c\xe9\x9b\xaa\x03\x4d\xf8\xe4\x6b\x64\x77\xba\x30\xeb\x14\x74\x77\x7c\xed\x64\x7d\x77\xd9\xa1\x51\x74\x27\x11\xe2\x70\x5e\x2f\x5f\x79\xe2\x03\x00\x7e\xfb\xce\x6d\x39\x78\x57\x93\x93\x8b\x54\x17\x97\xbb\xb8\x21\x54\x43\xcf\x02\x76\x92\x96\xef\xfb\x6d\x47\x79\xf9\xf8\xf9\x57\x45\xdd\x80\xe2\xc3\x20\x08\x4a\x45\x99\x33\x61\xf3\x99\xd1\xa1\x18\xe3\x0c\x5b\xfa\xd9\x3b\x16\xaf\x66\x4e\x6d\x1b\x1c\xc9\xbd\xb7\x84\xa7\xe8\x78\x24\xe8\x97\xfb\x1f\x26\x35\xbd\x26\x62\xa6\x68\x75\x94\xe4\x68\x8b\x3f\xf9\xb2\x9c\x34\xef\x65\x0f\x8d\x77\x1b\x2e\x67\xcb\x21\x09\x40\x51\x28\x5e\xc1\xbb\xdf\xde\x2f\xff\xf9\xfb\x5f\xb3\xee\xe7\xdd\x0b\x5e\x4c\x66\x54\x47\xbd\x8f\xe3\x0f\xb7\xf7\x2f\x56\x93\x0e\x72\x6d\x3d\xbd\xb2\x84\x4f\x8c\xa5\xf3\x51\xd8\xc4\xbb\xe0\x8b\x99\x5d\x0f\xe7\x8d\xe5\x0d\x76\xbe\x10\x6c\x76\x9b\x80\xeb\xe2\xa2\x52\x66\x57\x06\x8a\xf1\xc2\xeb\xda\x35\x40\x92\xdb\x8a\xcc\x13\x85\x4b\x13\xdb\x06\x3b\x53\x68\x2c\x54\xcf\x2c\xbd\x9a\xbf\x61\x03\x86\x80\xbb\x4b\xe2\x66\xbd\x49\xcc\xe1\xa2\x10\x0c\x5d\x6f\x2a\xde\x47\x28\x30\xd0\xd7\xf5\xa7\x81\x3f\x7d\xfc\xa6\x77\xfe\x20\xa0\x23\x32\x34\xa2\x75\x6f\xb6\x62\xeb\x48\x2e\xca\xf8\x5c\x83\x11\x94\x36\xbe\xa1\xc5\xa4\x7d\x47\x4d\xc6\xe7\x51\x3b\xfa\x1f\xee\x32\xc6\xbb\x82\x47\xf4\x7d\xde\x84\xfd\xc6\x9e\x9a\x90\x24\x6d\xc3\x34\xb0\x8b\x82\xce\x50\xcc\xce\x04\xcd\xd6\xd5\x91\x86\xab\x83\xac\x03\x63\xe9\xe8\xa3\xfa\x98\x8a\xe4\x88\x50\xbe\x3b\x07\xed\x21\x9a\x94\x8d\x0d\xc6\x40\x7a\x6a\xff\xd6\x81\x9a\x4c\x85\x8e\x63\x9d\xee\x92\x2b\xa8\x50\xc6\xa9\xec\x25\xd2\x34\x60\x3c\x57\xe4\xfa\xae\x2e\xc8\x36\xee\x0d\x39\x98\xa6\x5a\x94\x04\x21\x34\x81\x7d\x60\x78\x72\xfe\xd9\x81\x0f\xf0\xac\x74\x77\x52\x6c\xda\xdf\x34\x76\xa7\xfa\xd1\xda\x43\x14\x93\x02\x28\x79\x4b\x0e\x94\x10\x66\xf0\xe8\xc6\x3e\x75\x1c\x7a\x52\x68\x4e\x80\x45\xef\x13\x7d\x6d\x2c\x1b\x16\xbb\xeb\xe8\xf6\x6e\x54\x0b\x20\x15\x8a\xba\x1c\x62\x22\xd1\xc6\xd7\x8d\x77\x1a\xf5\x49\xb1\x26\x85\x31\xf7\xad\x40\x40\xa9\x12\x75\x44\x97\x78\x20\x87\x8e\x93\xfa\x48\x47\xf2\x53\x4c\x13\xcd\x0c\x33\x71\x4d\xc4\xd3\x27\x69\xa3\x58\xc6\x0c\x7e\x75\x86\xfa\x4a\x2f\xae\x53\xe4\x6b\x42\xa7\x6a\x52\x60\xf6\x91\x98\x31\xd5\x41\xcf\x47\x35\xd1\x25\x15\x80\x21\x67\x09\x18\xd8\xee\x60\x09\xac\x6b\xc6\xd7\x14\xa1\xc1\x20\x03\x06\x7c\xbc\x5b\xa7\xf7\xc4\xa4\xd0\x0a\xbb\x2b\x17\xb1\x26\xc8\xd1\x3c\x3d\x63\x28\xe2\x32\x85\x6e\xe3\x43\xf7\xa5\x31\x44\xe1\x9c\x2d\x4b\x0a\xb9\xa1\xe0\x34\x99\x93\x22\xd1\xed\x7a\xe7\x4f\xac\xc8\xae\x26\xf6\xbf\x0c\xeb\x00\x16\xa3\x3c\x04\x74\x91\x87\x07\xf5\x1c\x96\x6f\x7c\xa8\x51\x56\xa0\x54\x7d\x29\x5c\xd3\x1f\xc5\xfc\x9a\x62\xc4\x72\x56\xcf\xab\xe7\x03\x61\x9c\x63\x17\x73\x00\xf4\x39\x9d\x51\x14\x3a\xb9\xbc\x08\xde\xd1\xf2\xd9\x87\xe2\xfa\xf0\xf4\x98\x11\x0d\x27\xef\xd6\x7d\x17\x40\xa1\xd2\x87\x9d\x7e\x1b\x6c\x23\xed\x17\xda\x10\xc8\x49\x8f\xd5\xe7\x18\x37\x8c\xb5\x4c\x58\xa6\xb0\x02\xec\x52\x3d\xb0\xca\x6c\xa5\x69\xe5\x1a\x62\x6b\x2a\xc0\x98\xec\xb6\xec\xe6\x8d\x7d\x6a\x73\x32\x62\xa1\x54\xd4\xed\x0f\x6b\xdd\xb1\x83\xd8\xd6\x35\x06\xfe\x96\xae\x86\xe9\xcc\xec\xf1\x23\x39\x30\x6b\xeb\xab\xc9\x99\x6a\x4b\x17\x1c\x4f\x1b\xde\x92\xd9\x03\xf0\x3f\xec\x1a\x1a\xfa\xb4\x1e\xdf\x07\x7f\xdf\x19\xe6\x2e\xa7\x0e\x3d\xb8\x6b\xd8\xa0\xb5\x3b\x85\x88\xa1\x04\x0a\xd0\x9a\x50\x20\x8e\x95\x0f\x02\x4d\x15\xd2\x9b\x74\x0c\xa8\xb3\x42\xd3\xcb\x72\xf8\xc7\x82\x5d\xc1\x5a\x21\x7d\xb7\xe5\xae\x25\x3c\x5e\x61\xee\xf4\x46\xd9\xa5\x84\x96\x1e\xaf\xa0\xf1\x16\x03\xcb\x6e\xbe\x4c\xbe\xf7\x01\xe8\x2b\xd6\x8d\xa5\x6b\xe0\x53\x2f\x07\x3d\xb1\xeb\x3b\xa8\x02\xd9\xec\xba\xca\xda\xa2\xe5\xe2\x7a\xde\xe0\x64\x11\x47\x48\xfb\x1e\xaf\xc0\x60\x4c\x41\x6d\x82\xcf\x31\xd7\x56\x53\x69\xa3\x0a\xf5\x35\x44\x7f\xac\x78\x56\x68\xef\xbf\xe2\x29\x5a\x4b\x05\x3c\x5e\xad\x5d\xaf\x60\x12\xab\xe0\xf5\x0a\xe9\x1a\x07\x4d\xf0\x27\xe5\xe7\x5d\xf1\x4d\x2e\xa9\xdc\x89\x85\x17\x38\xe6\x4b\xe4\x74\x78\x0e\xbe\xf2\xf0\x9d\xa1\xa1\xc5\xbf\x50\x7e\xa4\x5d\xbc\xeb\xb0\xe4\xfc\xf4\x2c\xf7\x79\xc3\x3b\xe3\xdc\xdc\x49\x1f\xcf\x26\x3b\x4a\xb8\x02\xad\xc6\x6e\x42\x7c\x50\x98\x1e\xcd\xb4\xf9\xfe\x4f\xab\xc1\xba\xfe\xbe\xc3\x7f\xff\xb7\x38\x5c\x7d\x34\x86\x1a\xa1\xe2\x97\xd3\xff\x52\xaf\xae\x8e\xfe\x2c\x4d\x9f\x23\x36\x09\xbf\xfd\xbe\xe8\x14\x53\xf1\x65\xf8\x5b\x54\x27\xff\x1f\x00\x00\xff\xff\xf4\x5e\x87\xe5\x86\x16\x00\x00")

func aroOpenshiftIo_clustersYamlBytes() ([]byte, error) {
	return bindataRead(
		_aroOpenshiftIo_clustersYaml,
		"aro.openshift.io_clusters.yaml",
	)
}

func aroOpenshiftIo_clustersYaml() (*asset, error) {
	bytes, err := aroOpenshiftIo_clustersYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "aro.openshift.io_clusters.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _masterDeploymentYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\x52\xc1\x6e\xdb\x30\x0c\xbd\xfb\x2b\x88\xde\xdd\xa4\xb7\x42\xb7\x62\x0d\x7a\x19\x82\x62\x59\x77\x67\x64\x26\x16\x22\x8b\x02\x49\x07\x75\xbf\x7e\x10\x92\x28\xce\x0a\x64\x3a\x19\x7c\x8f\xef\x3d\xd2\xc4\x1c\xfe\x90\x68\xe0\xe4\x00\x73\xd6\xc5\xf1\xa9\x39\x84\xd4\x39\x78\xa5\x1c\x79\x1a\x28\x59\x33\x90\x61\x87\x86\xae\x01\x88\xb8\xa5\xa8\xe5\x0b\x4a\x83\x03\x14\x6e\x39\x93\xa0\xb1\xb4\x03\xaa\x91\x34\x00\x09\x07\xba\x87\x69\x46\x4f\x0e\x38\x53\xd2\x3e\xec\xac\xc5\xaf\x51\xa8\x92\x1b\xcd\xe4\x8b\x89\x50\x8e\xc1\xa3\x3a\x78\x6a\x00\x94\x22\x79\x63\x39\xd9\x0f\x68\xbe\xff\x39\xcb\x73\x37\x91\x9a\xa0\xd1\x7e\x3a\x51\x85\x63\x0c\x69\xff\x91\x3b\x34\xba\x74\x0f\xf8\xb9\x19\x65\x4f\x27\xb3\x73\xe5\x23\xe1\x11\x43\xc4\x6d\x24\x07\xcb\x06\xc0\x68\xc8\xb1\x76\xcd\x77\x53\x5e\xbc\xc9\x73\x37\x11\xc0\x65\xca\xf2\x3c\x27\xc3\x90\x48\x6a\x73\x0b\x9e\x87\x01\x53\x77\x55\x6b\x8b\xd4\x55\x5b\xf6\x3a\xc7\xea\xf6\xae\xa5\x99\x59\x79\x61\xc0\x32\xde\xdb\x6a\xbd\xfa\xf5\xf2\x7b\xf5\x5a\x81\xef\xff\xab\x42\x99\xc5\x6e\x6c\x6a\xd2\x77\x16\x73\xf0\xbc\x7c\x5e\x56\xf4\xa2\xd4\x9b\xe5\x5a\x8c\xe1\x48\x89\x54\xdf\x85\xb7\xe4\x66\xdc\xc2\x7a\x23\x9b\x97\x00\x32\x5a\xef\x60\xd1\x13\x46\xeb\xbf\x16\x42\xd8\x4d\xb7\x84\x7f\x6d\x13\x77\xb4\xb9\x39\x8d\x4b\xb5\x15\x8e\xf4\x78\x18\xb7\x24\x89\x8c\xf4\x31\xf0\xe2\xb4\x12\x07\x0f\x0f\x67\xaa\x92\x1c\x83\xa7\x17\xef\x79\x4c\xb6\xbe\x73\xb9\xdf\xd9\xf7\x98\x59\x02\x4b\xb0\xe9\x47\x44\xd5\x93\xac\x4e\x6a\x34\xb4\x3e\x8e\x85\xd7\x7a\x09\x16\x3c\xc6\x73\x83\x71\x2c\x3a\x81\xd3\xec\x06\x0e\x34\xb9\xff\xcc\x52\x47\xbe\xe4\x70\xb0\xfa\x0c\x6a\x5a\x01\xda\xed\xc8\x9b\x83\x35\x6f\x7c\x4f\xdd\x18\xa9\xf9\x1b\x00\x00\xff\xff\x57\x5c\x5d\xa2\xfa\x03\x00\x00")

func masterDeploymentYamlBytes() ([]byte, error) {
	return bindataRead(
		_masterDeploymentYaml,
		"master/deployment.yaml",
	)
}

func masterDeploymentYaml() (*asset, error) {
	bytes, err := masterDeploymentYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "master/deployment.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _masterRolebindingYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\x8e\xb1\x4e\x03\x31\x0c\x40\x77\x7f\x85\x7f\x20\x87\xd8\x50\x36\x60\x60\x2f\x12\xbb\x9b\xb8\xd4\xf4\x62\x47\x8e\xd3\xa1\x5f\x8f\xaa\xa2\x5b\x90\x6e\xb5\xdf\xf3\x33\x75\xf9\x62\x1f\x62\x9a\xd1\x8f\x54\x16\x9a\x71\x36\x97\x1b\x85\x98\x2e\x97\x97\xb1\x88\x3d\x5d\x9f\xe1\x22\x5a\x33\xbe\xaf\x73\x04\xfb\xc1\x56\x7e\x13\xad\xa2\xdf\xd0\x38\xa8\x52\x50\x06\x44\xa5\xc6\x19\xc9\x2d\x59\x67\xa7\x30\x4f\x8d\xee\x02\xb8\xad\x7c\xe0\xd3\x1d\xa2\x2e\x1f\x6e\xb3\xef\x04\x01\xf1\x5f\x6f\x3b\x5f\x1e\xb3\x44\xb5\x89\xc2\x98\xc7\x1f\x2e\x31\x32\xa4\x3f\xe7\x93\xfd\x2a\x85\x5f\x4b\xb1\xa9\xb1\xfb\xd5\x63\x37\x3a\x15\xce\x68\x9d\x75\x9c\xe5\x14\x89\x6e\xd3\x79\x83\xe1\x37\x00\x00\xff\xff\x4f\x98\xa4\x7c\x24\x01\x00\x00")

func masterRolebindingYamlBytes() ([]byte, error) {
	return bindataRead(
		_masterRolebindingYaml,
		"master/rolebinding.yaml",
	)
}

func masterRolebindingYaml() (*asset, error) {
	bytes, err := masterRolebindingYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "master/rolebinding.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _masterServiceYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x74\x8d\x41\xca\xc2\x40\x0c\x46\xf7\x73\x8a\x5c\x60\xa0\xff\xae\xcc\x29\x7e\x10\xdc\x87\xe9\xa7\x1d\xb4\x93\x90\xc4\x2e\x3c\xbd\xd4\x16\x5d\xb9\x0b\xef\x7b\xbc\xb0\xb6\x33\xcc\x9b\xf4\x42\xeb\x5f\xba\xb5\x3e\x15\x3a\xc1\xd6\x56\x91\x16\x04\x4f\x1c\x5c\x12\x51\xe7\x05\x85\xd8\x24\x8b\xc2\x38\xc4\xf2\xc2\x1e\xb0\x63\x73\xe5\x8a\x42\xa2\xe8\x3e\xb7\x4b\x64\x7e\x3e\x0c\x1f\x39\xb9\xa2\x6e\x1d\xc7\x1d\x35\xc4\xb6\x9b\x88\x55\x7f\x45\x55\x2c\x7c\xb7\xf2\xf1\x7d\x8e\xd0\x37\xd8\xd7\x42\xe3\x30\x0e\x07\x08\xb6\x2b\xe2\xff\x8b\x5f\x01\x00\x00\xff\xff\x10\x70\xf6\x36\xda\x00\x00\x00")

func masterServiceYamlBytes() ([]byte, error) {
	return bindataRead(
		_masterServiceYaml,
		"master/service.yaml",
	)
}

func masterServiceYaml() (*asset, error) {
	bytes, err := masterServiceYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "master/service.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _masterServiceaccountYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x3c\xca\x31\x8e\x02\x31\x0c\x05\xd0\x3e\xa7\xf0\x05\x52\x6c\xeb\x6e\xcf\x80\x44\xff\x95\xf9\x08\x0b\xc5\x8e\x1c\xcf\x14\x9c\x9e\x06\x51\xbf\x87\x65\x77\xe6\xb6\x70\x95\xeb\xaf\xbd\xcc\x0f\x95\x1b\xf3\xb2\xc1\xff\x31\xe2\xf4\x6a\x93\x85\x03\x05\x6d\x22\x8e\x49\x15\x64\xf4\x58\x4c\x54\x64\x9f\xd8\xc5\xfc\xda\x5e\x18\x54\x89\x45\xdf\x4f\x7b\x54\xc7\xfb\x4c\xfe\x72\xfb\x04\x00\x00\xff\xff\xe4\xf5\x04\x25\x70\x00\x00\x00")

func masterServiceaccountYamlBytes() ([]byte, error) {
	return bindataRead(
		_masterServiceaccountYaml,
		"master/serviceaccount.yaml",
	)
}

func masterServiceaccountYaml() (*asset, error) {
	bytes, err := masterServiceaccountYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "master/serviceaccount.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _namespaceYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x44\xca\xb1\x0d\x02\x31\x0c\x05\xd0\x3e\x53\x58\xd7\x07\x44\x9b\x21\x28\xe9\xbf\x2e\x1f\x61\x41\xec\x28\x36\x14\x4c\x8f\xa8\xae\x7f\x98\x7a\xe3\x0a\x75\x6b\xf2\xb9\x94\xa7\x5a\x6f\x72\xc5\x60\x4c\xec\x2c\x83\x89\x8e\x44\x2b\x22\x86\xc1\x26\x3e\x69\xf1\xd0\x7b\x56\x7c\xdf\x8b\xd5\x27\x17\xd2\x57\x11\x81\x99\x27\x52\xdd\xe2\xef\xe5\xb0\x27\xf5\xb3\x79\x67\x0d\xbe\xb8\xa7\xaf\x26\xdb\x56\x7e\x01\x00\x00\xff\xff\xc1\xaf\xa6\x4c\x7c\x00\x00\x00")

func namespaceYamlBytes() ([]byte, error) {
	return bindataRead(
		_namespaceYaml,
		"namespace.yaml",
	)
}

func namespaceYaml() (*asset, error) {
	bytes, err := namespaceYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "namespace.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _workerDeploymentYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\x52\xcb\x6e\xdb\x40\x0c\xbc\xeb\x2b\x88\xdc\x15\x27\xb7\x60\x6f\x41\x63\xe4\x52\x04\x45\xd3\xf4\x4e\xaf\xa6\xd6\xc2\xfb\x02\x49\xbb\x55\xbe\xbe\x10\x64\xcb\x32\x02\x88\x27\x61\x38\x9c\x19\x2e\xc5\x35\xfc\x86\x68\x28\xd9\x11\xd7\xaa\x9b\xd3\x63\x73\x08\xb9\x73\xf4\x82\x1a\xcb\x90\x90\xad\x49\x30\xee\xd8\xd8\x35\x44\x91\x77\x88\x3a\x7e\xd1\x38\xe0\x88\xa5\xb4\xa5\x42\xd8\x8a\xb4\x7f\x8b\x1c\x20\x0d\x51\xe6\x84\xb5\x9e\x56\xf6\x70\x54\x2a\xb2\xf6\xe1\x8f\xb5\xfc\x79\x14\xcc\xe4\x46\x2b\xfc\x68\x22\xa8\x31\x78\x56\x47\x8f\x0d\x91\x22\xc2\x5b\x91\xc9\x3e\xb1\xf9\xfe\xfb\x22\xcf\x6a\x22\x35\x61\xc3\x7e\x98\xa8\x52\x62\x0c\x79\xff\x51\x3b\x36\x5c\xa6\x13\xff\x7b\x3f\xca\x1e\x93\xd9\x19\xf9\xc8\x7c\xe2\x10\x79\x17\xe1\xe8\xa1\x21\x32\xa4\x1a\xe7\xa9\xe5\xdb\x8c\x15\x6f\xf2\xac\x26\x22\xba\x6c\x39\x96\x2f\xd9\x38\x64\xc8\x3c\xdc\x92\x2f\x29\x71\xee\xae\x6a\xed\x28\x75\xd5\x96\xbd\x2e\x7b\xf3\xeb\x5d\xa1\x85\xd9\x58\x21\xf1\xb8\xde\xeb\xf6\x6d\xfb\xf3\xf9\xd7\xf6\x65\x6e\x7c\xbd\xd7\xdc\x8a\xe1\x84\x0c\xd5\x1f\x52\x76\xb8\xda\x11\xf5\x66\xf5\x15\xb6\x84\x88\x2a\x5b\xef\x68\xd3\x83\xa3\xf5\x9f\x1b\x01\x77\xc3\x2d\xa1\x88\x39\x7a\x7a\x78\x7a\x38\xc3\xb9\x74\x78\xbf\x39\xec\x05\x6d\xa5\x44\xdc\x1f\x8e\x3b\x48\x86\x41\xef\x43\xd9\x4c\x0b\x39\xba\xbb\x3b\x53\x15\x72\x0a\x1e\xcf\xde\x97\x63\xb6\xb7\x95\xff\xee\x2b\x7b\x8d\x59\x25\x14\x09\x36\x7c\x8b\xac\x3a\xc9\xea\xa0\x86\xd4\xfa\x78\x54\x83\xb4\x5e\x82\x05\xcf\xb1\xf9\x1f\x00\x00\xff\xff\x4f\x57\x4a\x02\x45\x03\x00\x00")

func workerDeploymentYamlBytes() ([]byte, error) {
	return bindataRead(
		_workerDeploymentYaml,
		"worker/deployment.yaml",
	)
}

func workerDeploymentYaml() (*asset, error) {
	bytes, err := workerDeploymentYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "worker/deployment.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _workerRoleYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xa4\x8e\xb1\x6e\x2c\x31\x08\x45\x7b\xbe\x82\x1f\xb0\x57\xaf\x7b\x72\x9b\x22\x7d\x14\xa5\x67\x3d\x24\x83\xc6\x63\x2c\xc0\xbb\x52\xbe\x3e\x9a\xd9\x6d\x53\xa5\xe2\x0a\x1d\x0e\x17\x52\x4a\x40\x43\x3e\xd8\x5c\xb4\x17\xb4\x2b\xd5\x4c\x33\x56\x35\xf9\xa6\x10\xed\x79\xfb\xef\x59\xf4\x72\xfb\x07\x9b\xf4\xa5\xe0\x4b\x9b\x1e\x6c\x6f\xda\x18\x76\x0e\x5a\x28\xa8\x00\x62\x35\x3e\x0f\xde\x65\x67\x0f\xda\x47\xc1\x3e\x5b\x03\xc4\x4e\x3b\x17\x24\xd3\xa4\x83\x8d\x42\x2d\xdd\xd5\x36\x36\xb0\xd9\xd8\x0b\x24\xa4\x21\xaf\xa6\x73\xf8\x61\x4a\x07\x9b\x75\x70\xf7\x55\x3e\x23\x8b\x02\xa2\xb1\xeb\xb4\xca\x4f\xa2\x3e\x5a\x38\x20\xde\xd8\xae\xcf\xed\x17\xc7\x39\x9b\xf8\x23\xdc\x29\xea\xfa\x17\xff\xc5\x83\x62\xfe\xf2\x66\x9c\xf6\x23\xcd\xb1\x50\x30\xfc\x04\x00\x00\xff\xff\x30\x78\x19\x41\x50\x01\x00\x00")

func workerRoleYamlBytes() ([]byte, error) {
	return bindataRead(
		_workerRoleYaml,
		"worker/role.yaml",
	)
}

func workerRoleYaml() (*asset, error) {
	bytes, err := workerRoleYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "worker/role.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _workerRolebindingYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\x8d\x31\x6e\xc3\x30\x0c\x45\x77\x9d\x82\x17\x90\x8b\x6e\x85\xb6\xb6\x43\x77\x17\xe8\x4e\xcb\x74\xcd\xda\x26\x05\x8a\x72\x01\x9f\x3e\x08\x12\x64\x09\xe0\xf9\xbf\xf7\x1f\x16\xfe\x21\xab\xac\x92\xc0\x06\xcc\x1d\x36\x9f\xd5\xf8\x40\x67\x95\x6e\x79\xab\x1d\xeb\xcb\xfe\x1a\x16\x96\x31\xc1\xe7\xda\xaa\x93\xf5\xba\xd2\x07\xcb\xc8\xf2\x1b\x36\x72\x1c\xd1\x31\x05\x00\xc1\x8d\x12\xa0\x69\xd4\x42\x86\xae\x16\xff\xd5\x16\xb2\x60\xba\x52\x4f\xd3\x15\xc2\xc2\x5f\xa6\xad\x9c\x04\x03\xc0\x53\xef\xf4\xbe\xb6\xe1\x8f\xb2\xd7\x14\xe2\xdd\xfc\x26\xdb\x39\xd3\x7b\xce\xda\xc4\x4f\xe5\xdb\x56\x0b\x66\x4a\xa0\x85\xa4\xce\x3c\x79\xc4\xa3\x19\x3d\xe0\x70\x09\x00\x00\xff\xff\x73\xce\x57\x9b\x2a\x01\x00\x00")

func workerRolebindingYamlBytes() ([]byte, error) {
	return bindataRead(
		_workerRolebindingYaml,
		"worker/rolebinding.yaml",
	)
}

func workerRolebindingYaml() (*asset, error) {
	bytes, err := workerRolebindingYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "worker/rolebinding.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _workerServiceaccountYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x3c\xca\x31\x8a\xc3\x40\x0c\x05\xd0\x7e\x4e\xa1\x0b\x4c\xb1\xad\xba\x3d\x43\x20\xfd\x67\xfc\x43\x84\xb1\x34\x68\x64\x07\x72\xfa\x34\x21\xf5\x7b\x98\x76\x67\x2e\x0b\x57\xb9\xfe\xda\x6e\xbe\xa9\xdc\x98\x97\x0d\xfe\x8f\x11\xa7\x57\x3b\x58\xd8\x50\xd0\x26\xe2\x38\xa8\x82\x8c\x1e\x93\x89\x8a\xec\xaf\xc8\x9d\xf9\xb5\x35\x31\xa8\x12\x93\xbe\x9e\xf6\xa8\x8e\xf7\x99\xfc\xe5\xf6\x09\x00\x00\xff\xff\xe3\x3c\x43\x66\x70\x00\x00\x00")

func workerServiceaccountYamlBytes() ([]byte, error) {
	return bindataRead(
		_workerServiceaccountYaml,
		"worker/serviceaccount.yaml",
	)
}

func workerServiceaccountYaml() (*asset, error) {
	bytes, err := workerServiceaccountYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "worker/serviceaccount.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"aro.openshift.io_clusters.yaml": aroOpenshiftIo_clustersYaml,
	"master/deployment.yaml":         masterDeploymentYaml,
	"master/rolebinding.yaml":        masterRolebindingYaml,
	"master/service.yaml":            masterServiceYaml,
	"master/serviceaccount.yaml":     masterServiceaccountYaml,
	"namespace.yaml":                 namespaceYaml,
	"worker/deployment.yaml":         workerDeploymentYaml,
	"worker/role.yaml":               workerRoleYaml,
	"worker/rolebinding.yaml":        workerRolebindingYaml,
	"worker/serviceaccount.yaml":     workerServiceaccountYaml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"aro.openshift.io_clusters.yaml": {aroOpenshiftIo_clustersYaml, map[string]*bintree{}},
	"master": {nil, map[string]*bintree{
		"deployment.yaml":     {masterDeploymentYaml, map[string]*bintree{}},
		"rolebinding.yaml":    {masterRolebindingYaml, map[string]*bintree{}},
		"service.yaml":        {masterServiceYaml, map[string]*bintree{}},
		"serviceaccount.yaml": {masterServiceaccountYaml, map[string]*bintree{}},
	}},
	"namespace.yaml": {namespaceYaml, map[string]*bintree{}},
	"worker": {nil, map[string]*bintree{
		"deployment.yaml":     {workerDeploymentYaml, map[string]*bintree{}},
		"role.yaml":           {workerRoleYaml, map[string]*bintree{}},
		"rolebinding.yaml":    {workerRolebindingYaml, map[string]*bintree{}},
		"serviceaccount.yaml": {workerServiceaccountYaml, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
